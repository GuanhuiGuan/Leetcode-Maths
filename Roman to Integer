class Solution {//I V X L C D M (in cpp)
public:
    int romanToInt(string s) {
        map<char, int> value = {{'I', 1}, {'V', 5}, {'X', 10}, {'L', 50}, {'C', 100}, {'D', 500}, {'M', 1000}};
        
        int digit = value[s.back()];            //First add last element
        for(int i = s.size() - 1; i > 0; i--)
        {
            if(value[s[i - 1]] >= value[s[i]])   //Deal with the former element
            {
                digit += value[s[i - 1]];       //Former larger or equal: add
            }
            else
            {
                digit -= value[s[i - 1]];       //Former smaller: minus
            }
        }
        return digit;
    }
};

class Solution {// in Java!! //
    public int romanToInt(String s) {
        HashMap<String, Integer> value = new HashMap<String, Integer>();
        value.put("I", 1);
        value.put("V", 5);
        value.put("X", 10);
        value.put("L", 50);
        value.put("C", 100);
        value.put("D", 500);
        value.put("M", 1000);
        /*("I", 1), ("V", 5), ("X", 10), ("L", 50), ("C", 100), ("D", 500), ("M", 1000);*/
        
        String last = s.substring(s.length() - 1);
        Integer digit = value.get(last);
        for(Integer i = s.length() - 1; i > 0; i--)
        {
            if(value.get(s.substring(i - 1, i)) < value.get(s.substring(i, i + 1)))
            {
                digit -= value.get(s.substring(i - 1, i));
            }
            else
            {
                digit += value.get(s.substring(i - 1, i));
            }
        }
        return digit;
    }
}

/*Hashmap:
py: hash = {"a" : x};
cpp: map<str, int> hash = {{"a", x}};
java: HashMap<String, Integer> hash = new HashMap<String, Integer>();
        hash.put(("a", x));
        y = hash.get("a");
        x = string.substring(start, end) or string.charAt(i);
*/
